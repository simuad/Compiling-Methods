digraph finite_state_machine {
    rankdir=TB;
    size="100"

    node [shape = doublecircle]; START;
    node [shape = doublecircle]; IDENT;
    node [shape = doublecircle]; INT;
    node [shape = doublecircle]; FLOAT;
    node [shape = doublecircle]; SEMICOLON;
    node [shape = doublecircle]; STR;
    node [shape = doublecircle]; OP_PAREN_O;
    node [shape = doublecircle]; OP_PAREN_C;
    node [shape = doublecircle]; OP_BRACE_O;
    node [shape = doublecircle]; OP_BRACE_C;
    node [shape = doublecircle]; OP_BRACK_O;
    node [shape = doublecircle]; OP_BRACK_C;
    node [shape = doublecircle]; OP_COMMA;
    node [shape = doublecircle]; OP_ASSIGN_OP;
    node [shape = doublecircle]; OP_PRE_INC;
    node [shape = doublecircle]; ADD;
    node [shape = doublecircle]; OP_ASSIGN_DIFF;
    node [shape = doublecircle]; OP_PRE_DEC;
    node [shape = doublecircle]; COMMENT_END;
    node [shape = doublecircle]; DIV;
    node [shape = doublecircle]; MULTI_COMMENT_END_FINAL;
    node [shape = doublecircle]; OP_ASSIGN_QUOT;
    node [shape = doublecircle]; OP_ASSIGN_PROD;
    node [shape = doublecircle]; MULT;
    node [shape = doublecircle]; MOD;
    node [shape = doublecircle]; OP_ASSIGN_REM;
    node [shape = doublecircle]; EQ;
    node [shape = doublecircle]; ASSIGN;
    node [shape = doublecircle]; G;
    node [shape = doublecircle]; L;
    node [shape = doublecircle]; KW_IF;
    node [shape = doublecircle]; AND;
    node [shape = doublecircle]; OR;
    node [shape = doublecircle]; UNARY_NOT;
    node [shape = doublecircle]; N_EQ;
    node [shape = point ]; qi
    node [shape = circle];

    qi                           -> START;
    START                    -> START      [ label = "\\n | ' ' | \\t" ];
    START                    -> LEX_IDENT   [ label = "[a-h][j-z][A-Z][_]"   ];
    LEX_IDENT              -> LEX_IDENT   [ label = "[a-z][A-Z][1-9][_]"   ];
    LEX_IDENT              -> IDENT;
    START                     -> LEX_IDENT_I   [ label = "i"   ];
    LEX_IDENT_I              -> LEX_IDENT_IF   [ label = "f"   ];
    LEX_IDENT_I              -> LEX_IDENT   [ label = "else"   ];
    LEX_IDENT_IF            ->LEX_IDENT  [ label = "[a-z][A-Z][1-9][_]"   ];
    LEX_IDENT_IF            ->KW_IF;
    START                    -> LIT_INT   [ label = "[0-9]"   ];
    LIT_INT                   -> LIT_INT   [ label = "[0-9]"   ];
    LIT_INT                   -> INT;
    LIT_INT                   -> LIT_FLOAT   [ label = "."   ];
    LIT_INT                   -> LIT_FLOAT_SC   [ label = "e"   ];
    LIT_FLOAT_SC         -> LIT_FLOAT_SC   [ label = "[0-9]"   ];
    LIT_FLOAT_SC         -> LIT_FLOAT_SC_NEG   [ label = "-"   ];
    LIT_FLOAT_SC         -> FLOAT;
    LIT_FLOAT_SC_NEG -> LIT_FLOAT_SC_NEG   [ label = "[0-9]"   ];
    LIT_FLOAT_SC_NEG -> FLOAT;
    LIT_FLOAT              -> LIT_FLOAT   [ label = "[0-9]"   ];
    LIT_FLOAT              -> FLOAT;
    START                    -> SEMICOLON  [ label = ";"   ];
    START                    -> LIT_STR   [ label = "\""   ];
    LIT_STR                  -> LIT_STR   [ label = "ÃƒÅ½Ã‚Â©\\\""   ];
    LIT_STR                  -> LEX_ESC_SEQUENCE   [ label = "\\"   ];
    LEX_ESC_SEQUENCE -> LIT_STR   [ label = "n, \\, t, \""   ];
    LIT_STR                  -> STR   [ label = "\""   ];
    START                     -> OP_PAREN_O [ label = "("   ];
    START                     -> OP_PAREN_C [ label = ")"   ];
    START                     -> OP_BRACE_O [ label = "{"   ];
    START                     -> OP_BRACE_C [ label = "}"   ];
    START                     -> OP_BRACK_O [ label = "["   ];
    START                     -> OP_BRACK_C [ label = "]"   ];
    START                     -> OP_COMMA   [ label = ","   ];
    START                     -> LIT_FLOAT   [ label = "."   ];
    START                     -> OP_ADD   [ label = "+"   ];
    OP_ADD                    -> OP_ASSIGN_OP   [ label = "="   ];
    OP_ADD                   -> OP_PRE_INC   [ label = "+"   ];
    OP_ADD                   -> ADD   [ label = "[0-9][a-z][A-Z][_]"   ];
    START                     -> OP_SUB   [ label = "-"   ];
    OP_SUB                   -> OP_ASSIGN_DIFF   [ label = "="   ];
    OP_SUB                   -> OP_PRE_DEC   [ label = "-"   ];
    OP_SUB                   -> LIT_INT   [ label = "[0-9]"   ];
    START                     -> OP_DIV   [ label = "/"   ];
    OP_DIV                    -> COMMENT   [ label = "/"   ];
    COMMENT                -> COMMENT   [ label = "ÃƒÅ½Ã‚Â©\\\\n"   ];
    COMMENT                 -> COMMENT_END   [ label = "\\n"   ];
    OP_DIV                     -> MULTI_COMMENT   [ label = "*"   ];
    OP_DIV                    -> OP_ASSIGN_QUOT   [ label = "="   ];
    OP_DIV                    -> DIV   [ label = "[a-z][A-Z][0-9][_]"   ];
    MULTI_COMMENT     -> MULTI_COMMENT   [ label = "ÃƒÅ½Ã‚Â©\\*"   ];
    MULTI_COMMENT     -> MULTI_COMMENT_END   [ label = "*"   ];
    MULTI_COMMENT_END -> MULTI_COMMENT   [ label = "ÃƒÅ½Ã‚Â©\\/"   ];
    MULTI_COMMENT_END -> MULTI_COMMENT_END   [ label = "*"   ];
    MULTI_COMMENT_END -> MULTI_COMMENT_END_FINAL   [ label = "/"   ];
    START                     -> OP_MULT   [ label = "*"   ];
    OP_MULT                 -> MULT   [ label = "[0-9][a-z][A-Z][_]"   ];
    OP_MULT                 -> OP_ASSIGN_PROD   [ label = "="   ];
    START                     -> OP_MOD   [ label = "%"   ];
    OP_MOD                  -> MOD   [ label = "[0-9][a-z][A-Z][_]"   ];
    OP_MOD                  -> OP_ASSIGN_REM   [ label = "="   ];
    START                     -> OP_ASSIGN   [ label = "="   ];
    OP_ASSIGN              -> ASSIGN   [ label = "[0-9][a-z][A-Z][_]"   ];
    OP_ASSIGN              -> EQ   [ label = "="   ];
    START                      -> OP_G   [ label = ">"   ];
    OP_G                       -> G   [ label = "[0-9][a-z][A-Z][_]"   ];
    OP_G                       -> OP_G_EQ   [ label = "="   ];
    START                     -> OP_L   [ label = "<"   ];
    OP_L                        -> L   [ label = "[0-9][a-z][A-Z][_]"   ];
    OP_L                         -> OP_G_EQ   [ label = "="   ];
    START                      -> OP_L_NOT   [ label = "!"   ];
    START                     -> OP_L_AND   [ label = "&"   ];
    START                      -> OP_L_OR   [ label = "|"   ];
    OP_L_AND                 -> AND   [ label = "&"   ];
    OP_L_OR                   -> OR   [ label = "|"   ];
    OP_L_NOT                 -> N_EQ   [ label = "="   ];
    OP_L_NOT                 -> UNARY_NOT   [ label = "[0-9][a-z][A-Z][_]"   ];

}