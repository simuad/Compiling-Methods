/* Transliavimo metodai       */
/* 1 užduotis                 */
/* Daumantas Bekintis 1711354 */


<PROGRAM> ::= <DECLARATIONS>

<DECLARATIONS> ::= <DECLARATION> | <DECLARATIONS> <DECLARATION>
<DECLARATION> ::= <FUNCTION_DECLARATION> | <STRUCT>

<FUNCTION_DECLARATION> ::= <TYPE> <VARIABLE> <IDENTIFIERS> <STATEMENT_BLOCK>
<IDENTIFIERS> ::= "(" ")" | "(" <PARAMETER_SEQUENCE> ")"
<PARAMETER_SEQUENCE> ::= <PARAMETER> | <PARAMETER_SEQUENCE> "," <PARAMETER>
<PARAMETER> ::= <TYPE> <VARIABLE>

<STATEMENT_BLOCK> ::= "{" "}" | "{" <STATEMENTS> "}"
<STATEMENTS> ::= <STATEMENT> ";" | <STATEMENTS> <STATEMENT> ";"
<STATEMENT> ::= <ASSIGNMENT_STATEMENT> | <BREAK_STATEMENT> | <DECLARATION_STATEMENT> | <EXPRESSION_STATEMENT> | <IF_STATEMENT> | <IO_STATEMENT> | <RETURN_STATEMENT> | <STRUCT_DECLARATION> | <WHILE_STATEMENT> | <FOR_STATEMENT>

<ASSIGNMENT_STATEMENT> ::= <VARIABLE> <ASSIGNMENT_OPERATOR> <EXPRESSION> | <ARRAY_ASSIGNMENT> | <STRUCT_ASSIGNMENT>
<BREAK_STATEMENT> ::= "break"
<DECLARATION_STATEMENT> ::= <TYPE> <VARIABLE> | <ARRAY_WITH_TYPE> | <TYPE> <VARIABLE> <ASSIGNMENT_OPERATOR> <EXPRESSION>
<EXPRESSION_STATEMENT> ::= <EXPRESSION>
<RETURN_STATEMENT> ::= "return" | "return" <EXPRESSION>

<FUNCTION_CALL> ::= <VARIABLE> <FUNCTION_CALL_ARGUMENTS>
<FUNCTION_CALL_PARAMETERS> ::= "(" ")" | "(" <EXPRESSION_SEQUENCE> ")" /* EXPRESSION SEQUENCE */
<EXPRESSION_SEQUENCE> ::= <EXPRESSION> | <EXPRESSION_SEQUENCE> "," <EXPRESSION>

/* Arrays */
<ARRAY> ::= <VARIABLE> <ARRAY_SIZE>
<ARRAY_SIZE> ::= "[" <ARRAY_TYPES> "]" | <ARRAY_SIZE>  "[" <ARRAY_TYPES> "]"
<ARRAY_TYPES> ::= <VARIABLE> | <DIGITS>
<ARRAY_ASSIGNMENT> ::= <ARRAY_WITH_TYPE> "=" "{" <ARRAY_PRIMARY_SEQUENCE> "}"
<ARRAY_WITH_TYPE> ::= <TYPE> <ARRAY>
<ARRAY_PRIMARY_SEQUENCE> ::= "{" <VARIABLE_SEQUENCE> "}" | <ARRAY_PRIMARY_SEQUENCE> ",{" <VARIABLE_SEQUENCE> "}"
<VARIABLE_SEQUENCE> ::= <VARIABLE> | <VARIABLE_SEQUENCE> "," <VARIABLE>

/* Structures */

<STRUCTS> ::= <STRUCT> | <STRUCTS> <STRUCT>
<STRUCT> ::= "struct" <STRUCT_NAME> <STRUCT_STATEMENT_BLOCK>
<STRUCT_DECLARATION> ::= "struct" <STRUCT_NAME> " " <STRUCT_NAME>
<STRUCT_STATEMENT_BLOCK> ::= "{" "}" ";" | "{" <STRUCT_STATEMENTS> "}" ";"
<STRUCT_STATEMENTS> ::= <STRUCT_STATEMENT> ";" | <STRUCT_STATEMENTS> <STRUCT_STATEMENT> ";" /* STRUCT ELEMENTS */
<STRUCT_STATEMENT> ::= <DECLARATION_STATEMENT> | <STRUCT_ASSIGNMENT_STATEMENT>
<STRUCT_ASSIGNMENT_STATEMENT> ::= <DECLARATION_STATEMENT> <ASSIGNMENT_OPERATOR> <EXPRESSION> | <ARRAY_ASSIGNMENT>
<STRUCT_NAME> ::= <UPPERCASE_LETTER> | <UPPERCASE_LETTER> <ALPHANUMERIC>
<STRUCT_ASSIGNMENT> ::= <STRUCT_NAME> "." <VARIABLE> <ASSIGNMENT_OPERATOR> <EXPRESSION>

<IO_STATEMENT> ::= <SCANF> | <PRINTF>
<SCANF> ::= "scanf" "(" "'" <LETTERS> "'" "," <VARIABLE_SEQUENCE_SCANF> ")"
<PRINTF> ::= "printf" "(" "'" <LETTERS> "'" "," <PRIMARY_SEQUENCE> ")" | "printf" "(" "'" <LETTERS> "'" ")"

<VARIABLE_SEQUENCE_SCANF> ::= "&" <VARIABLE> | <VARIABLE_SEQUENCE_SCANF> "," "&" <VARIABLE>

/* Control statements */

<IF_STATEMENT> ::= <IF_STATEMENT1> | <IF_STATEMENT1> <IF_STATEMENT2> | <IF_STATEMENT1> <IF_STATEMENT3>  | <IF_STATEMENT1> <IF_STATEMENT3> <IF_STATEMENT2>
/* Simple if */
<IF_STATEMENT1> ::= "if" "(" <EXPRESSION> ")" <STATEMENT_BLOCK>
/* Else without parameters */
<IF_STATEMENT2> ::= "else" <STATEMENT_BLOCK>
/* Else with parameters */
<IF_STATEMENT3> ::= <IF_STATEMENT4> | <IF_STATEMENT3> <IF_STATEMENT4>
<IF_STATEMENT4> ::= "else" "if" "(" <EXPRESSION> ")" <STATEMENT_BLOCK>

<WHILE_STATEMENT> ::= "while" "(" <EXPRESSION> ")" <STATEMENT_BLOCK>

<FOR_STATEMENT> ::= "for" "(" <FOR_STATEMENT_EXPRESSION> ")" <STATEMENT_BLOCK>
<FOR_STATEMENT_EXPRESSION> ::= <DECLARATION_STATEMENT_OR_EMPTY> ";" <COMPARISON_OR_EMPTY> ";" <ASSIGNMENT_STATEMENT_OR_EMPTY>
/* Basically only doing it so for(;;) is possible */
<ASSIGNMENT_STATEMENT_OR_EMPTY> ::= "" | <ASSIGNMENT_STATEMENT>
<DECLARATION_STATEMENT_OR_EMPTY> ::= "" | <DECLARATION_STATEMENT>
<COMPARISON_OR_EMPTY> ::= "" | <EXPRESSION>

/* Arithmetic operations */
<EXPRESSION> ::= <LOGICAL_OR>
<LOGICAL_OR> ::= <LOGICAL_AND> | <LOGICAL_OR> "||" <LOGICAL_AND>
<LOGICAL_AND> ::= <RELATION_GROUP1> | <LOGICAL_AND> "&&" <RELATION_GROUP1>
<RELATION_GROUP1> ::= <RELATION_GROUP2> | <RELATION_GROUP1> <RELATIONAL_OPERATOR_GROUP1> <RELATION_GROUP2>
<RELATION_GROUP2> ::= <ADDITION> | <RELATION_GROUP2> <RELATIONAL_OPERATOR_GROUP2> <ADDITION>
<ADDITION> ::= <MULTIPLICATION> | <ADDITION> <ADDITION_OPERATOR> <MULTIPLICATION>
<MULTIPLICATION> ::= <UNARY> | <MULTIPLICATION> <MULTIPLICATION_OPERATOR> <UNARY>
<UNARY> ::= <PRIMARY> | <UNARY_OPERATOR> <UNARY>

<ALPHANUMERIC> ::= <LETTERS> | <DIGITS> | <ALPHANUMERIC> <DIGITS> | <ALPHANUMERIC> <LETTERS>

<PRIMARY> ::= <REAL_NUMBER> | <VARIABLE> | <ARRAY> | <FUNCTION_CALL> | <STRING> | <BOOLEAN>
<VARIABLE> ::= <VARIABLE_SYMBOLS>
<VARIABLE_SYMBOLS> ::= <VARIABLE_BEGINNING> | <VARIABLE_SYMBOLS> <VARIABLE_ENDING>
<VARIABLE_ENDING> ::= <VARIABLE_BEGINNING> | <DIGITS>
<VARIABLE_BEGINNING> ::= <LETTERS> | "_"
<LETTERS> ::= <LETTER> | <LETTERS> <LETTER>
<LETTER> ::= <LOWERCASE_LETTER> | <UPPERCASE_LETTER>

<REAL_NUMBER> ::= <INTEGER> | <FLOAT1>
<FLOAT1> ::= <FLOAT2> | <FLOAT2> "e" <INTEGER> | <INTEGER> "e" <INTEGER>
<FLOAT2> ::= <INTEGER> <FRACTIONAL_PART> | <FRACTIONAL_PART> | <INTEGER> "."
<FRACTIONAL_PART> ::= <DECIMAL_POINT> <DIGITS>
<INTEGER> ::= <SIGN> <DIGITS> | <DIGITS>
<DIGITS> ::= <DIGIT> | <DIGITS> <DIGIT>

/* Strings */
<STRING> ::= "'" <STRING_CHARACTER> "'" | "'" "'"
<STRING_CHARACTERS> ::= <STRING_CHARACTER> | <STRING_CHARACTERS> <STRING_CHARACTER>
<ESCAPED_CHARACTERS> ::= "\" <ESCAPED_CHARACTER>
<ESCAPED_CHARACTER> ::= "\" | "t" | "n" | "0"
<SYMBOLS> ::= <SYMBOL> | <SYMBOLS> <SYMBOL>
<SYMBOL> ::= "+" | "-" | "/" | "=" | "%" | "&" | "!" | "@" | "#" | "$" | "^" | "&"

<MULTIPLICATION_OPERATOR> ::= "*" | "/" | "%"
<UNARY_OPERATOR> ::= "+" | "-" | "!" | "++" | "--"
<ADDITION_OPERATOR> ::= "+" | "-"
<RELATIONAL_OPERATOR> ::= <RELATIONAL_OPERATOR_GROUP1> | <RELATIONAL_OPERATOR_GROUP2>
<RELATIONAL_OPERATOR_GROUP1> ::= "==" | "!="
<RELATIONAL_OPERATOR_GROUP2> ::= "<" | ">" | "<=" |  ">="
<ASSIGNMENT_OPERATOR> ::= "=" | "-=" | "+=" | "*=" | "/="

<TYPE> ::= "int" | "float" | "bool" | "void" | "string"

<SIGN> ::= "+" | "-"
<DECIMAL_POINT> ::= "."

<BOOLEAN> ::= "true" | "false"

<LOWERCASE_LETTER> ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z"
<UPPERCASE_LETTER> ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z"
<DIGIT> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

/* <COMMENT> ::= "//" <ASCII> <NEWLINE>                                                                   */
/* <MULTILINE_COMMENT> ::= "/*" <MULTILINE_SYMBOLS> "*/"                                                  */
/* <MULTILINE_SYMBOLS> ::= <WHITESPACE> | <LETTERS> | <DIGITS> | <MULTILINE_SYMBOLS> <MULTILINE_SYMBOLS>  */
/* <WHITESPACE> ::= " " | ""                                                                              */